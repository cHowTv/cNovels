# Generated by Django 3.2 on 2021-06-06 07:56

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import novel.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('last_searched', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('is_author', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('premium', models.BooleanField(default=False)),
                ('summary', ckeditor.fields.RichTextField()),
                ('bookFile', models.FileField(upload_to='book_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx']), novel.models.valid_pdf_mimetype, novel.models.valid_size])),
                ('date_uploaded', models.DateField(default=django.utils.timezone.now)),
                ('bookImage', models.FileField(default='default_profile.jpg', upload_to='book/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.models.valid_image_mimetype, novel.models.valid_size])),
            ],
        ),
        migrations.CreateModel(
            name='Chapters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.PositiveIntegerField()),
                ('book', ckeditor.fields.RichTextField()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a book genre (e.g. Science Fiction)', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Novel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('premium', models.BooleanField(default=False)),
                ('summary', ckeditor.fields.RichTextField()),
                ('isbn', models.CharField(blank=True, help_text='13 Character <a href="https://www.isbn-international.org/content/what-isbn"> ISBN number </a>', max_length=13, null=True, unique=True)),
                ('bookFile', models.FileField(upload_to='book_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx']), novel.models.valid_pdf_mimetype, novel.models.valid_size])),
                ('story', ckeditor.fields.RichTextField()),
                ('date_uploaded', models.DateField(default=django.utils.timezone.now)),
                ('bookImage', models.ImageField(default='default_profile.jpg', upload_to='book/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.models.valid_image_mimetype, novel.models.valid_size])),
            ],
        ),
        migrations.CreateModel(
            name='Poems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('premium', models.BooleanField(default=False)),
                ('isbn', models.CharField(blank=True, help_text='13 Character <a href="https://www.isbn-international.org/content/what-isbn"> ISBN number </a>', max_length=13, null=True, unique=True)),
                ('bookFile', models.FileField(upload_to='book_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx']), novel.models.valid_pdf_mimetype, novel.models.valid_size])),
                ('story', ckeditor.fields.RichTextField()),
                ('date_uploaded', models.DateField(default=django.utils.timezone.now)),
                ('bookImage', models.ImageField(default='default_profile.jpg', upload_to='book/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.models.valid_image_mimetype, novel.models.valid_size])),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorName', models.CharField(max_length=200)),
                ('profile_image', models.ImageField(default='default_profile.jpg', upload_to='profile/images', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.models.valid_image_mimetype, novel.models.valid_size])),
                ('about_me', models.TextField(blank=True, null=True)),
                ('instagram', models.CharField(max_length=30, null=True)),
                ('twitter', models.CharField(max_length=30, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Weekly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audios_of_week', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='weekaudios', to='novel.audio')),
                ('authors_of_week', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='weekauthors', to='novel.profile')),
                ('novels_of_week', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='weeknovel', to='novel.novel')),
                ('poems_of_week', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='weekpoems', to='novel.poems')),
                ('special_feature', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='weekspecial', to='novel.novel')),
            ],
        ),
        migrations.AddField(
            model_name='poems',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='novel.profile'),
        ),
        migrations.AddField(
            model_name='poems',
            name='created_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='poemcretor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='novel',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='novel.profile'),
        ),
        migrations.AddField(
            model_name='novel',
            name='chapter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='novel.chapters'),
        ),
        migrations.AddField(
            model_name='novel',
            name='created_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='novel',
            name='genre',
            field=models.ManyToManyField(help_text='Select multiple genres for this book', to='novel.Genre'),
        ),
        migrations.AddField(
            model_name='audio',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='novel.profile'),
        ),
        migrations.AddField(
            model_name='audio',
            name='created_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audiocreator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='audio',
            name='genre',
            field=models.ManyToManyField(help_text='Select multiple genres for this book', to='novel.Genre'),
        ),
        migrations.AddField(
            model_name='user',
            name='favorite',
            field=models.ManyToManyField(blank=True, to='novel.Novel'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='recently_viewed_audios',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recently_viewed_audios', to='novel.audio'),
        ),
        migrations.AddField(
            model_name='user',
            name='recently_viewed_novels',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recently_viewed_novels', to='novel.novel'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_audios',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='saved_audios', to='novel.audio'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_novels',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='saved_novel', to='novel.novel'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_poems',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='saved_poems', to='novel.poems'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]

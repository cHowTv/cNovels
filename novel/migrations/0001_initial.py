# Generated by Django 3.2.7 on 2022-12-21 14:50

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.fields
import django.utils.timezone
import multiselectfield.db.fields
import novel.utils.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('last_searched', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('is_author', models.BooleanField(default=False)),
                ('has_interest', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('premium', models.BooleanField(default=False)),
                ('summary', ckeditor.fields.RichTextField()),
                ('bookFile', models.FileField(blank=True, upload_to='book_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx']), novel.utils.utils.valid_pdf_mimetype, novel.utils.utils.valid_size])),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('bookImage', models.ImageField(blank=True, null=True, upload_to='book/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.utils.utils.valid_image_mimetype, novel.utils.utils.valid_size])),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a book genre (e.g. Science Fiction)', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Novel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('premium', models.BooleanField(default=False)),
                ('summary', ckeditor.fields.RichTextField()),
                ('isbn', models.CharField(blank=True, help_text='13 Character <a href="https://www.isbn-international.org/content/what-isbn"> ISBN number </a>', max_length=13, null=True, unique=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('bookImage', models.ImageField(blank=True, null=True, upload_to='book/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.utils.utils.valid_image_mimetype, novel.utils.utils.valid_size])),
                ('readers_num', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Poems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('premium', models.BooleanField(default=False)),
                ('isbn', models.CharField(blank=True, help_text='13 Character <a href="https://www.isbn-international.org/content/what-isbn"> ISBN number </a>', max_length=13, null=True, unique=True)),
                ('bookFile', models.FileField(blank=True, upload_to='book_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx']), novel.utils.utils.valid_pdf_mimetype, novel.utils.utils.valid_size])),
                ('story', ckeditor.fields.RichTextField()),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('bookImage', models.ImageField(blank=True, null=True, upload_to='book/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.utils.utils.valid_image_mimetype, novel.utils.utils.valid_size])),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorName', models.CharField(max_length=200)),
                ('profile_image', models.ImageField(blank=True, upload_to='profile/images', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg']), novel.utils.utils.valid_image_mimetype, novel.utils.utils.valid_size])),
                ('about_me', models.TextField(blank=True, null=True)),
                ('country', models.CharField(max_length=30, null=True)),
                ('twitter', models.CharField(max_length=30, null=True)),
                ('genre', models.ManyToManyField(to='novel.Genre')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Weekly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authors_of_week', models.ManyToManyField(blank=True, related_name='weekauthors', to='novel.Profile')),
                ('special_feature', models.ManyToManyField(blank=True, related_name='weekspecial', to='novel.Novel')),
                ('weekly_featured_audios', models.ManyToManyField(blank=True, related_name='weekaudios', to='novel.Audio')),
                ('weekly_featured_novels', models.ManyToManyField(blank=True, related_name='weeknovel', to='novel.Novel')),
                ('weekly_featured_poems', models.ManyToManyField(blank=True, related_name='weekpoems', to='novel.Poems')),
            ],
        ),
        migrations.CreateModel(
            name='UserIntrest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hobbies', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Traveling'), (2, 'Reading'), (3, 'Singing'), (4, 'Dancing'), (5, 'Movies')], max_length=9)),
                ('genre', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Action'), (2, 'Adventure'), (3, 'Comedy'), (4, 'Romance'), (5, 'Fantasy')], max_length=3)),
                ('profile', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Author'), (2, 'Reader')], max_length=3)),
                ('language', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Spanish'), (2, 'English'), (3, 'Yoruba')], max_length=3)),
                ('history', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Medieval'), (2, 'Cyberpunk'), (3, 'Iceage'), (4, 'Ile-ife dynasty'), (5, 'Neolitic'), (6, 'Northern Caliphate'), (7, 'Paleolithic')], max_length=3)),
                ('identity', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Women'), (2, 'Men'), (3, 'GenZ'), (4, 'Ile-ife dynasty'), (5, 'Neolitic'), (6, 'Northern Caliphate'), (7, 'Paleolithic')], max_length=3)),
                ('faith', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Christain'), (2, 'Muslim'), (3, 'Judaism'), (4, 'Ile-ife dynasty'), (5, 'Neolitic'), (6, 'Northern Caliphate'), (7, 'Paleolithic')], max_length=3)),
                ('user', models.OneToOneField(on_delete=django.db.models.fields.CharField, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('u', 'unread'), ('r', 'read'), ('f', 'finished')], default='u', max_length=1)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='novel.novel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='poems',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='novel.profile'),
        ),
        migrations.AddField(
            model_name='poems',
            name='created_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='poemcretor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='novel',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='novel.profile'),
        ),
        migrations.AddField(
            model_name='novel',
            name='created_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='novel',
            name='genre',
            field=models.ManyToManyField(help_text='Select multiple genres for this book', to='novel.Genre'),
        ),
        migrations.CreateModel(
            name='Chapters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('number', models.PositiveIntegerField(blank=True, null=True)),
                ('book', ckeditor.fields.RichTextField()),
                ('novel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='novel.novel')),
            ],
        ),
        migrations.AddField(
            model_name='audio',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='novel.profile'),
        ),
        migrations.AddField(
            model_name='audio',
            name='created_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audiocreator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='audio',
            name='genre',
            field=models.ManyToManyField(help_text='Select multiple genres for this book', to='novel.Genre'),
        ),
        migrations.AddField(
            model_name='user',
            name='favorite',
            field=models.ManyToManyField(blank=True, to='novel.Novel'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='recently_viewed_audios',
            field=models.ManyToManyField(blank=True, related_name='recently_viewed_audios', to='novel.Audio'),
        ),
        migrations.AddField(
            model_name='user',
            name='recently_viewed_chapters',
            field=models.ManyToManyField(blank=True, related_name='recently_viewed_chapters', to='novel.Chapters'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_audios',
            field=models.ManyToManyField(blank=True, related_name='saved_audios', to='novel.Audio'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_novels',
            field=models.ManyToManyField(blank=True, related_name='saved_novel', to='novel.Novel'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_poems',
            field=models.ManyToManyField(blank=True, related_name='saved_poems', to='novel.Poems'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
